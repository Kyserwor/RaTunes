package dao;

import mvc.model.Song;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by rlukas on 02.11.2015.
 */
public class SongDAO {
    private static DatabaseConnection databaseConnection = null;

    public SongDAO() {
        databaseConnection = new DatabaseConnection();
        databaseConnection.connection();
    }

    public void addSong(Song song) {
        try {
            String queryString = "INSERT INTO ratunes.song" +
                    "(title, songtext, songwriter, albumID) " +
                    " VALUES " +
                    "(?, ?, ?, ?)";
            PreparedStatement statement = databaseConnection.getStatement(queryString);
            statement.setString(1, song.getTitle());
            statement.setString(2, song.getSongText());
            statement.setString(3, song.getSongWriter());
            statement.setInt(4, song.getAlbumID());
            statement.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e);
        } finally {
            try {
                databaseConnection.closeConnection();
                databaseConnection.closeStatement();
            } catch (SQLException e) {
                System.out.println(e);
            }
        }
    }

    public void addSongs(List<Song> songs) {
        for (Song song : songs) {
            addSong(song);
        }
    }

    public void updateSong(Song song) {
        try {
            String queryString = "UPDATE ratunes.song" +
                    "SET (title, songtext, songwriter, albumID)" +
                    "VALUES " +
                    "(?, ?, ?, ?)" +
                    " WHERE id = ?";
            PreparedStatement statement = databaseConnection.getStatement(queryString);
            statement.setString(1, song.getTitle());
            statement.setString(2, song.getSongText());
            statement.setString(3, song.getSongWriter());
            statement.setInt(4, song.getAlbumID());
            statement.setInt(5, song.getSongID());
            statement.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e);
        } finally {
            databaseConnection.closeDatabase();
        }
    }

    public Song getSongByID(int songID) {
        Song song = null;
        try {
            String query = "SELECT title,songtext,songwriter,albumID FROM ratunes.song WHERE id=?";
            PreparedStatement statement = databaseConnection.getStatement(query);
            statement.setInt(1, songID);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                song = new Song(songID,
                        resultSet.getString("title"),
                        resultSet.getString("songtext"),
                        resultSet.getString("songwriter"),
                        resultSet.getInt("albumID"));
            }
        } catch (SQLException e) {
            System.out.println(e);
        } finally {
            databaseConnection.closeDatabase();
        }
        return song;
    }

    public List<Song> getSongsByAlbumID(int albumID) {
        List<Song> songs = new ArrayList<Song>();
        try {
            String query = "SELECT title,songtext,songwriter,id FROM ratunes.song WHERE albumID=?";
            PreparedStatement statement = databaseConnection.getStatement(query);
            statement.setInt(1, albumID);
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                songs.add(new Song(resultSet.getInt("id"),
                        resultSet.getString("title"),
                        resultSet.getString("songtext"),
                        resultSet.getString("songwriter"),
                        albumID));
            }
        } catch (SQLException e) {
            System.out.println(e);
        } finally {
            databaseConnection.closeDatabase();
        }
        return songs;
    }
}
